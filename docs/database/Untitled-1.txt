<!-- filepath: c:\Users\Ivan\Desktop\retool\sbv-professional-app\src\backend\routes\rapport-routes.js -->
const express = require('express');
const router = express.Router();
const db = require('../database');

// GET: Alle Rapporte abrufen
router.get('/api/rapporte', async (req, res) => {
    try {
        const { jahr, periode, teilprojekt, status } = req.query;
        let query = `
            SELECT r.*, 
                   COUNT(DISTINCT rm.id) as anzahl_massnahmen,
                   COUNT(DISTINCT rk.id) as anzahl_kpis,
                   AVG(rk.zielerreichung) as durchschnitt_kpi_erreichung
            FROM rapporte r
            LEFT JOIN rapport_massnahmen rm ON r.id = rm.rapport_id
            LEFT JOIN rapport_kpis rk ON r.id = rk.rapport_id
            WHERE 1=1
        `;
        const params = [];

        if (jahr) {
            query += ' AND r.jahr = ?';
            params.push(jahr);
        }
        if (periode) {
            query += ' AND r.periode = ?';
            params.push(periode);
        }
        if (teilprojekt) {
            query += ' AND r.teilprojekt = ?';
            params.push(teilprojekt);
        }
        if (status) {
            query += ' AND r.status = ?';
            params.push(status);
        }

        query += ' GROUP BY r.id ORDER BY r.jahr DESC, r.periode DESC';

        const rapporte = await db.query(query, params);
        res.json(rapporte);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// POST: Neuen Rapport erstellen
router.post('/api/rapporte', async (req, res) => {
    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        const { teilprojekt, jahr, periode, massnahmen, kpis, ...rapportData } = req.body;
        
        // Generiere Rapport-Nummer
        const [lastRapport] = await connection.query(
            'SELECT rapport_nummer FROM rapporte WHERE jahr = ? ORDER BY id DESC LIMIT 1',
            [jahr]
        );
        const nextNumber = lastRapport.length > 0 
            ? parseInt(lastRapport[0].rapport_nummer.split('-')[2]) + 1 
            : 1;
        const rapportNummer = `R-${jahr}-${String(nextNumber).padStart(3, '0')}`;

        // Budget aus Template laden
        const [templateData] = await connection.query(
            'SELECT budget_standard FROM teilprojekt_templates WHERE teilprojekt = ?',
            [teilprojekt]
        );
        const budgetBrutto = templateData[0]?.budget_standard || 0;

        // Rapport erstellen
        const [result] = await connection.query(
            `INSERT INTO rapporte (
                rapport_nummer, teilprojekt, jahr, periode, budget_brutto, 
                erstellt_von, was_lief_gut, abweichungen, lessons_learned
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
                rapportNummer, teilprojekt, jahr, periode, budgetBrutto,
                req.user.id, rapportData.was_lief_gut, rapportData.abweichungen, 
                rapportData.lessons_learned
            ]
        );

        const rapportId = result.insertId;

        // Maßnahmen einfügen
        if (massnahmen && massnahmen.length > 0) {
            for (const [index, massnahme] of massnahmen.entries()) {
                await connection.query(
                    `INSERT INTO rapport_massnahmen 
                    (rapport_id, massnahme_name, budget_plan, ist_wert, sortierung) 
                    VALUES (?, ?, ?, ?, ?)`,
                    [rapportId, massnahme.name, massnahme.budget, massnahme.ist || 0, index]
                );
            }
        }

        // KPIs einfügen
        if (kpis && kpis.length > 0) {
            for (const [index, kpi] of kpis.entries()) {
                await connection.query(
                    `INSERT INTO rapport_kpis 
                    (rapport_id, kpi_name, einheit, zielwert, istwert, sortierung) 
                    VALUES (?, ?, ?, ?, ?, ?)`,
                    [rapportId, kpi.name, kpi.einheit, kpi.zielwert, kpi.istwert || 0, index]
                );
            }
        }

        await connection.commit();
        res.status(201).json({ 
            success: true, 
            rapportId, 
            rapportNummer,
            message: 'Rapport erfolgreich erstellt' 
        });

    } catch (error) {
        await connection.rollback();
        res.status(500).json({ error: error.message });
    } finally {
        connection.release();
    }
});

// PUT: Rapport aktualisieren (nur für Admin)
router.put('/api/rapporte/:id', requireAdmin, async (req, res) => {
    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        const { massnahmen, kpis, ...rapportData } = req.body;
        
        // Rapport aktualisieren
        await connection.query(
            'UPDATE rapporte SET ? WHERE id = ?',
            [rapportData, req.params.id]
        );

        // Alte Maßnahmen und KPIs löschen
        await connection.query('DELETE FROM rapport_massnahmen WHERE rapport_id = ?', [req.params.id]);
        await connection.query('DELETE FROM rapport_kpis WHERE rapport_id = ?', [req.params.id]);

        // Neue Maßnahmen einfügen
        if (massnahmen && massnahmen.length > 0) {
            for (const [index, massnahme] of massnahmen.entries()) {
                await connection.query(
                    `INSERT INTO rapport_massnahmen 
                    (rapport_id, massnahme_name, budget_plan, ist_wert, sortierung) 
                    VALUES (?, ?, ?, ?, ?)`,
                    [req.params.id, massnahme.name, massnahme.budget, massnahme.ist || 0, index]
                );
            }
        }

        // Neue KPIs einfügen
        if (kpis && kpis.length > 0) {
            for (const [index, kpi] of kpis.entries()) {
                await connection.query(
                    `INSERT INTO rapport_kpis 
                    (rapport_id, kpi_name, einheit, zielwert, istwert, sortierung) 
                    VALUES (?, ?, ?, ?, ?, ?)`,
                    [req.params.id, kpi.name, kpi.einheit, kpi.zielwert, kpi.istwert || 0, index]
                );
            }
        }

        await connection.commit();
        res.json({ success: true, message: 'Rapport erfolgreich aktualisiert' });

    } catch (error) {
        await connection.rollback();
        res.status(500).json({ error: error.message });
    } finally {
        connection.release();
    }
});

// Middleware für Admin-Prüfung
function requireAdmin(req, res, next) {
    if (req.user.rolle !== 'admin' && req.user.rolle !== 'super_admin') {
        return res.status(403).json({ error: 'Keine Berechtigung' });
    }
    next();
}

module.exports = router;